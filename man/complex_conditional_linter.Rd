% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complex_conditional_linter.R
\name{complex_conditional_linter}
\alias{complex_conditional_linter}
\title{Complex Conditional Expressions Linter}
\usage{
complex_conditional_linter(threshold = 2L)
}
\arguments{
\item{threshold}{Integer. The maximum number of logical operands (\code{&&} or \code{||})
allowed in a conditional expression (default: \code{2L}).}
}
\description{
Detects complex conditional expressions and suggests extracting
them into Boolean functions or variables for improved readability and reusability.
}
\details{
For example, if you have a conditional expression with more than two logical operands,

\if{html}{\out{<div class="sourceCode">}}\preformatted{if (looks_like_a_duck(x) &&
    swims_like_a_duck(x) &&
    quacks_like_a_duck(x)) \{
    ...
\}
}\if{html}{\out{</div>}}

to improve its readability and reusability, you can extract the conditional expression.

Either into a Boolean function:

\if{html}{\out{<div class="sourceCode">}}\preformatted{is_duck <- function(x) \{
  looks_like_a_duck(x) &&
    swims_like_a_duck(x) &&
    quacks_like_a_duck(x)
\}

if (is_duck(x)) \{
  ...
\}
}\if{html}{\out{</div>}}

Or into a Boolean variable:

\if{html}{\out{<div class="sourceCode">}}\preformatted{is_duck <- looks_like_a_duck(x) &&
   swims_like_a_duck(x) &&
   quacks_like_a_duck(x)

if (is_duck) \{
 ...
\}
}\if{html}{\out{</div>}}
}
\examples{
# will produce lints
code <- "if (a && b && c) { do_something() }"
writeLines(code)
lint(
  text = code,
  linters = complex_conditional_linter()
)

# okay
ready_to_do_something <- a && b && c
code <- "if (ready_to_do_something) { do_something() }"
writeLines(code)
lint(
  text = code,
  linters = complex_conditional_linter()
)

}
\seealso{
\link{linters} for a complete list of linters available in lintr.
}
\section{Tags}{
\link[=best_practices_linters]{best_practices}, \link[=configurable_linters]{configurable}, \link[=readability_linters]{readability}, \link[=style_linters]{style}
}
